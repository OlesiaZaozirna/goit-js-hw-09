{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAG3C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAS,C,SAAET,E,MAAUC,GAEvBK,EACFH,EAAQM,GAERL,EAAOK,EAAO,GAEfR,EAAM,G,CAbYP,SAASC,cAAc,yBAiB/Be,iBAAiB,SAASC,IACzCA,EAAEC,iBAEF,MAAMC,EAAaC,OAAOlB,EAAWmB,OAC/BC,EAAYF,OAAOjB,EAAUkB,OAC7BE,EAAgBH,OAAOhB,EAAYiB,OAEzC,GACEG,MAAML,IACNK,MAAMF,IACNE,MAAMD,IACNJ,EAAa,GACbG,EAAY,GACZC,EAAgB,EAEhBE,EAAA5B,GAAS6B,OAAOC,QAAQ,4CAR1B,CAYA,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAeK,IACjCvB,EAAc,EAAIuB,EAAGT,EAAaS,EAAIN,GACnCO,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBI,YAAW,KACTc,EAAA5B,GAAS6B,OAAOI,QACd,uBAAqBxB,QAAiBC,MAAU,GAE7C,IAAJqB,EAAQ,IAEZG,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBI,YAAW,KACTc,EAAA5B,GAAS6B,OAAOC,QACd,sBAAoBrB,QAAeC,MAAU,GAE1C,IAAJqB,EAAQ,IAIjB7B,EAAKiC,O,CAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst btnCreatePromise = document.querySelector('button[type=\"submit\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      const result = { position, delay };\n\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result);\n      }\n    }, delay);\n  });\n}\n\nbtnCreatePromise.addEventListener('click', e => {\n  e.preventDefault();\n\n  const firstDelay = Number(delayInput.value);\n  const delayStep = Number(stepInput.value);\n  const promiseAmount = Number(amountInput.value);\n\n  if (\n    isNaN(firstDelay) ||\n    isNaN(delayStep) ||\n    isNaN(promiseAmount) ||\n    firstDelay < 0 ||\n    delayStep < 0 ||\n    promiseAmount < 0\n  ) {\n    Notiflix.Notify.failure('Please enter valid positive numbers.');\n    return;\n  }\n\n  for (let i = 0; i < promiseAmount; i++) {\n    createPromise(1 + i, firstDelay + i * delayStep)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        }, i * 100);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        }, i * 100);\n      });\n  }\n\n  form.reset();\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","result","addEventListener","e","preventDefault","firstDelay","Number","value","delayStep","promiseAmount","isNaN","$parcel$interopDefault","Notify","failure","i","then","success","catch","reset"],"version":3,"file":"03-promises.9682c9ee.js.map"}
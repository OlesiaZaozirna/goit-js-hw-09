{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAClBD,SAASC,cAAc,yBAiB/BI,iBAAiB,SAAS,SAAAC,G,kBAf3C,IAAuBC,EAAUC,GAAVD,EAmCL,EAAIE,EAnCWD,EAmCRE,EAAaD,EAAIE,EAlCjC,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAS,CAAEZ,WAAUC,SAEvBQ,EACFH,EAAQM,GAERL,EAAOK,E,GAERX,E,KAyBAY,MAAK,SAAAC,G,IAAGd,EAAQc,EAARd,SAAUC,EAAKa,EAALb,MACjBO,YAAW,WACTO,EAAAzB,GAAS0B,OAAOC,QACd,uBAAwCC,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,M,GAE3C,IAAJC,E,IAEJiB,OAAM,SAAAL,G,IAAGd,EAAQc,EAARd,SAAUC,EAAKa,EAALb,MAClBO,YAAW,WACTO,EAAAzB,GAAS0B,OAAOI,QACd,sBAAqCF,OAAflB,EAAS,QAAYkB,OAANjB,EAAM,M,GAExC,IAAJC,E,KAhCTH,EAAEsB,iBAEF,IAAMlB,EAAamB,OAAO3B,EAAW4B,OAC/BnB,EAAYkB,OAAO1B,EAAU2B,OAC7BC,EAAgBF,OAAOzB,EAAY0B,OAEzC,GACEE,MAAMtB,IACNsB,MAAMrB,IACNqB,MAAMD,IACNrB,EAAa,GACbC,EAAY,GACZoB,EAAgB,EAEhBT,EAAAzB,GAAS0B,OAAOI,QAAQ,4CAR1B,CAYA,IAAK,IAAIM,EAAI,EAAGA,EAAIF,EAAeE,IAAGC,EAAAD,GAkBtClC,EAAKoC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\nconst btnCreatePromise = document.querySelector('button[type=\"submit\"]');\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      const result = { position, delay };\n\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result);\n      }\n    }, delay);\n  });\n}\n\nbtnCreatePromise.addEventListener('click', e => {\n  e.preventDefault();\n\n  const firstDelay = Number(delayInput.value);\n  const delayStep = Number(stepInput.value);\n  const promiseAmount = Number(amountInput.value);\n\n  if (\n    isNaN(firstDelay) ||\n    isNaN(delayStep) ||\n    isNaN(promiseAmount) ||\n    firstDelay < 0 ||\n    delayStep < 0 ||\n    promiseAmount < 0\n  ) {\n    Notiflix.Notify.failure('Please enter valid positive numbers.');\n    return;\n  }\n\n  for (let i = 0; i < promiseAmount; i++) {\n    createPromise(1 + i, firstDelay + i * delayStep)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        }, i * 100);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        }, i * 100);\n      });\n  }\n\n  form.reset();\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","e","position","delay","i","firstDelay","delayStep","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","result","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","preventDefault","Number","value","promiseAmount","isNaN","i1","_loop","reset"],"version":3,"file":"03-promises.255efe37.js.map"}